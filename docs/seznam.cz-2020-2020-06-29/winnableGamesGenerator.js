!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=46)}({1:function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),n.d(t,"d",(function(){return a})),n.d(t,"c",(function(){return s})),n.d(t,"e",(function(){return i})),n.d(t,"b",(function(){return d})),n.d(t,"i",(function(){return l})),n.d(t,"h",(function(){return u})),n.d(t,"f",(function(){return f})),n.d(t,"j",(function(){return p})),n.d(t,"g",(function(){return h})),function(e){e.SPADES="Color.SPADES",e.HEARTHS="Color.HEARTHS",e.DIAMONDS="Color.DIAMONDS",e.CLUBS="Color.CLUBS"}(r||(r={}));const o=[r.HEARTHS,r.DIAMONDS];var a;!function(e){e.ACE="Rank.ACE",e.TWO="Rank.TWO",e.THREE="Rank.THREE",e.FOUR="Rank.FOUR",e.FIVE="Rank.FIVE",e.SIX="Rank.SIX",e.SEVEN="Rank.SEVEN",e.EIGHT="Rank.EIGHT",e.NINE="Rank.NINE",e.TEN="Rank.TEN",e.JACK="Rank.JACK",e.QUEEN="Rank.QUEEN",e.KING="Rank.KING"}(a||(a={}));const s=[a.ACE,a.TWO,a.THREE,a.FOUR,a.FIVE,a.SIX,a.SEVEN,a.EIGHT,a.NINE,a.TEN,a.JACK,a.QUEEN,a.KING];var i;!function(e){e.FACE="Side.FACE",e.BACK="Side.BACK"}(i||(i={}));class c{constructor(e,t,n){this.color=e,this.rank=t,this.side=n}}const d=[].concat(...Object.values(r).map(e=>s.map(t=>new c(e,t,i.BACK))));function l(e,t){return 1===f(e,t)&&!function(e,t){const n=o.includes(e.color),r=o.includes(t.color);return n===r}(e,t)}function u(e,t){return-1===f(e,t)&&e.color===t.color}function f(e,t){return s.indexOf(e.rank)-s.indexOf(t.rank)}function p(e){return new c(e.color,e.rank,e.side===i.FACE?i.BACK:i.FACE)}function h(e,t){return e.color===t.color&&e.rank===t.rank}},10:function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"c",(function(){return l})),n.d(t,"a",(function(){return u}));var r=n(1),o=n(6),a=n(7),s=n(2),i=n(8),c=n(3);function d(e,t){f(t);const{state:n,rules:r}=e;if(Object(o.c)(n))return e;const i=p(n,r,t,t.lookAheadMoves);if(!i)return e;const[d]=i;return function e(t,n,r){var o;const i=n[0].move;if(!r||i!==s.a.WASTE_TO_FOUNDATION&&i!==s.a.WASTE_TO_TABLEAU)return Object(a.c)(t,h(t.state,t.rules,n,r),n[0]);const d=Object(c.b)(t.state.waste.cards);if((null===(o=d)||void 0===o?void 0:o.rank)===n[1].rank&&d.color===n[1].color)return Object(a.c)(t,h(t.state,t.rules,n,r),n[0]);const l=t.state.stock.cards.length?{drawnCards:t.rules.drawnCards,move:s.a.DRAW_CARDS}:{move:s.a.REDEAL},u=Object(a.d)(t,l);return e(u,n,r)}(e,d,!1)}function l(e,t,n){if(f(n),Object(o.c)(e))return e;const r=p(e,t,n,n.lookAheadMoves);if(!r)return e;const[a]=r;return h(e,t,a,!1)}function u({foundation:e,tableau:{piles:t}}){return Object.values(e).map(e=>e.cards.length).concat(t.map(e=>e.cards.filter(e=>e.side===r.e.FACE).length)).reduce((e,t)=>e+t,0)}function f(e){if(!Number.isInteger(e.maxConsideredConfidenceLevels)||e.maxConsideredConfidenceLevels<0)throw new TypeError("The maxConsideredConfidenceLevels option must be a non-negative integer, "+`${e.maxConsideredConfidenceLevels} was provided`);if(!Number.isSafeInteger(e.lookAheadMoves)||e.lookAheadMoves<0)throw new TypeError(`The lookAheadMoves option must be a non-negative integer, ${e.lookAheadMoves} was provided`)}function p(e,t,n,r){const a=Object(i.d)(e,t,i.a.WITH_FULL_STOCK);if(!a.length)return null;if(n.minAutoAcceptConfidence&&i.b.indexOf(a[0][2])<=i.b.indexOf(n.minAutoAcceptConfidence)){const r=h(e,t,a[0],!0),o=n.stateRankingHeuristic(r);return[a[0],o]}let s=a[0];const c=i.b.indexOf(s[2]);let d=Number.NEGATIVE_INFINITY;for(const l of a){if(i.b.indexOf(l[2])>c+n.maxConsideredConfidenceLevels)continue;const a=h(e,t,l,!0);let u;if(r&&!Object(o.d)(a)){const e=p(a,t,n,r-1);if(!e)continue;[,u]=e}else u=n.stateRankingHeuristic(a);u>d&&(d=u,s=l)}return[s,d]}function h(e,t,n,r){var a;const i=n[0].move;if(i!==s.a.WASTE_TO_FOUNDATION&&i!==s.a.WASTE_TO_TABLEAU)return Object(o.b)(e,t,n[0]);const d=Object(c.b)(e.waste.cards);if((null===(a=d)||void 0===a?void 0:a.rank)===n[1].rank&&d.color===n[1].color)return Object(o.b)(e,t,n[0]);const l=e.stock.cards.length?{drawnCards:t.drawnCards,move:s.a.DRAW_CARDS}:{move:s.a.REDEAL},u=Object(o.b)(e,t,l);return r?h(u,t,n,r):u}},13:function(e,t,n){"use strict";n.d(t,"c",(function(){return s})),n.d(t,"a",(function(){return i})),n.d(t,"d",(function(){return c})),n.d(t,"b",(function(){return d}));var r=n(1),o=n(7),a=n(2);function s(e){if(e.rules.drawnCards>36)throw new RangeError(`The drawnCards rule must a safe positive integer no larger than 36, ${e.rules.drawnCards} was `+"provided");if(e.state.tableau.piles.length>parseInt("zz",36))throw new RangeError(`The number of tableau piles must be a safe positive integer no larger than ${parseInt("zz",36)}, `+`${e.state.tableau.piles.length} was provided`);const t=e.history.length?e.history[0][0]:e.state;var n,r;return[2,e.rules.allowNonKingToEmptyPileTransfer?"1":"0",e.rules.drawnCards.toString(36),e.state.tableau.piles.length.toString(36).padStart(2,"0"),c(t),Math.floor((e.startTime.absoluteTimestamp-1572617642e3)/1e3).toString(36),",",Math.floor(e.startTime.logicalTimestamp).toString(36),";",e.history.length.toString(36),":",(n=e.history.concat(e.future),r=e.startTime.logicalTimestamp,n.map(([,e],t)=>function(e,t){return[Math.floor(e.logicalTimestamp-t).toString(36),",;:-=+*!".charAt(u.indexOf(e.move)),function(){switch(e.move){case a.a.DRAW_CARDS:return`${e.drawnCards.toString(36)}.`;case a.a.WASTE_TO_TABLEAU:case a.a.TABLEAU_TO_FOUNDATION:case a.a.REVEAL_TABLEAU_CARD:return`${e.pileIndex.toString(36).padStart(2,"0")}`;case a.a.FOUNDATION_TO_TABLEAU:return`${e.pileIndex.toString(36)}${",;:-".charAt(f.indexOf(e.color))}`;case a.a.TABLEAU_TO_TABLEAU:return[e.sourcePileIndex,e.topMovedCardIndex,e.targetPileIndex].map(e=>e.toString(36).padStart(2,"0")).join("");case a.a.REDEAL:case a.a.WASTE_TO_FOUNDATION:return"";default:throw new TypeError(`Unknown move type: ${e.move}`)}}()].join("")}(e,t?n[t-1][1].logicalTimestamp:r)).join(""))].join("")}function i(e){if(!e.startsWith(2..toString()))throw new Error(`Invalid state or unsupported version: ${e}`);const t={allowNonKingToEmptyPileTransfer:!!parseInt(e.charAt(1),10),drawnCards:parseInt(e.charAt(2),36),tableauPiles:parseInt(e.substring(3,5),36)},n=d(e.substring(5,56)),r=e.substring(56,e.indexOf(";",56)),s=function(e){const[t,n]=e.split(",").map(e=>parseInt(e,36));return{absoluteTimestamp:1e3*t+1572617642e3,logicalTimestamp:n}}(r),i=e.substring(56+r.length+1,e.indexOf(":",56)),c=parseInt(i,36),l=e.substring(56+r.length+1+i.length+1),p=Object(o.b)(t,n),h=function(e,t,n){const r=[];let s=e,i=t,c=0;for(;c<n.length;){let e=n.substring(c);const t=parseInt(e,36),d=u[",;:-=+*!".indexOf(e.charAt(t.toString(36).length))];let l;switch(i+=t,c+=t.toString(36).length+1,e=n.substring(c),d){case a.a.DRAW_CARDS:const n=e.substring(0,e.indexOf("."));c+=n.length+1,l={drawnCards:parseInt(n,36),logicalTimestamp:i,move:d};break;case a.a.WASTE_TO_TABLEAU:case a.a.TABLEAU_TO_FOUNDATION:case a.a.REVEAL_TABLEAU_CARD:{const t=parseInt(e.substring(0,2),36);c+=2,l={logicalTimestamp:i,move:d,pileIndex:t}}break;case a.a.FOUNDATION_TO_TABLEAU:{const t=parseInt(e,36),n=f[",;:-".indexOf(e.charAt(t.toString(36).length))];c+=t.toString(36).length+1,l={color:n,logicalTimestamp:i,move:d,pileIndex:t}}break;case a.a.TABLEAU_TO_TABLEAU:const[r,o,s]=e.substring(0,6).match(/../g).map(e=>parseInt(e,36));c+=6,l={logicalTimestamp:i,move:d,sourcePileIndex:r,targetPileIndex:s,topMovedCardIndex:o};break;case a.a.REDEAL:case a.a.WASTE_TO_FOUNDATION:l={logicalTimestamp:i,move:d};break;default:throw new Error(`Failed to deserialize a history item at the index ${c} of history records due to `+`unknown move type: ${e.substr(t.toString(36).length,1)}`)}r.push([s.state,l]),s=Object(o.d)(s,l)}return r}(p,s.logicalTimestamp,l);let A={...p,future:h,startTime:s};for(let e=0;e<c;e++)A=Object(o.e)(A);return A}function c(e){return function(e){return e.slice(0,-1).map(l).join("")}([...e.stock.cards,...e.tableau.piles.map(e=>e.cards.slice().reverse()).reverse().flat()])}function d(e){const t=new Set(p);return e.split("").map(e=>{const n=h.indexOf(e),r=p[n];return t.delete(r),r}).concat([...t])}function l(e){const t=Object.keys(e).filter(e=>"side"!==e),n=p.findIndex(n=>t.every(t=>e[t]===n[t]));if(-1===n)throw new TypeError(`Received an invalid card: ${JSON.stringify(e)}`);return h[n]}const u=Object.values(a.a).sort(),f=Object.values(r.a).sort(),p=r.b,h=(()=>{const e=Array.from({length:26}).map((e,t)=>String.fromCharCode(97+t));return[...e,...e.map(e=>e.toUpperCase())]})()},15:function(e,t,n){"use strict";n.d(t,"b",(function(){return s})),n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return c}));var r=n(10),o=n(6),a=n(8);const s={allowNonKingToEmptyPileTransfer:!1,drawnCards:1,tableauPiles:7},i={lookAheadMoves:2,maxConsideredConfidenceLevels:3,minAutoAcceptConfidence:a.c.HIGH,stateRankingHeuristic:r.a},c={maxMoves:300,maxSimulationTime:2e4,simulationEndPredicate:o.d}},2:function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.DRAW_CARDS="MoveType.DRAW_CARDS",e.REDEAL="MoveType.REDEAL",e.WASTE_TO_FOUNDATION="MoveType.WASTE_TO_FOUNDATION",e.WASTE_TO_TABLEAU="MoveType.WASTE_TO_TABLEAU",e.TABLEAU_TO_FOUNDATION="MoveType.TABLEAU_TO_FOUNDATION",e.REVEAL_TABLEAU_CARD="MoveType.REVEAL_TABLEAU_CARD",e.FOUNDATION_TO_TABLEAU="MoveType.FOUNDATION_TO_TABLEAU",e.TABLEAU_TO_TABLEAU="MoveType.TABLEAU_TO_TABLEAU"}(r||(r={}))},3:function(e,t,n){"use strict";function r(e){return e.length?o(e):null}function o(e){if(e.length)return e[e.length-1];throw new Error("The provided array is empty")}n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return o}))},4:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return a})),n.d(t,"c",(function(){return s})),n.d(t,"d",(function(){return i})),n.d(t,"g",(function(){return c})),n.d(t,"f",(function(){return d})),n.d(t,"e",(function(){return l}));var r=n(1);class o{constructor(e){this.cards=e}}function a(e,t){if(!Number.isSafeInteger(t)||t<=0)throw new TypeError(`The numberOfCards parameter must be a positive safe integer, ${t} was provided`);const n=e.cards.slice(-t).reverse();return[new o(e.cards.slice(0,Math.max(e.cards.length-t,0))),n]}function s(e,t){return new o(e.cards.concat(t))}function i(e,t){return new o(e.cards.concat(t.cards))}function c(e,t){const n=e.cards.indexOf(t);if(-1===n)throw new Error("The specified card is not present in the specified pile");const a=e.cards.slice(),s=Object(r.j)(t);return a.splice(n,1,s),new o(a)}function d(e,t){const n=e.cards.indexOf(t);if(-1===n)throw new Error("The specified card is not present in the specified pile");return[new o(e.cards.slice(0,n)),new o(e.cards.slice(n))]}function l(e){const t=e.cards.slice();for(let e=0;e<t.length-1;e++){const n=Math.floor(Math.random()*(t.length-e))+e,r=t[e];t[e]=t[n],t[n]=r}return new o(t)}},46:function(e,t,n){"use strict";n.r(t);var r=n(7),o=n(13);class a{constructor(e,t,n,r){this.gameRules=e,this.botOptions=t,this.gameSimulationOptions=n,this.taskRunner=r,this.onProgress=null,this.nextScheduledGeneratorTask=null,this.knownWinnableDecks=new Set}runGenerator(){if(!this.nextScheduledGeneratorTask){const e=()=>{this.nextScheduledGeneratorTask=this.taskRunner(e),this.testNextRandomDeck()};this.nextScheduledGeneratorTask=this.taskRunner(e)}}stopGenerator(){this.nextScheduledGeneratorTask&&(this.nextScheduledGeneratorTask.cancel(),this.nextScheduledGeneratorTask=null)}generateWinnableGame(){const e=new a(this.gameRules,this.botOptions,this.gameSimulationOptions,this.taskRunner);return{task:new Promise(t=>{e.onProgress=n=>{n&&(this.knownWinnableDecks.add(n),e.stopGenerator(),t(n))},e.runGenerator()}),cancel(){e.stopGenerator()}}}get generatedDecks(){return this.knownWinnableDecks}testNextRandomDeck(){const[e,t]=Object(r.a)(this.gameRules,this.botOptions,this.gameSimulationOptions),n=t?Object(o.d)(e.state):null;n&&this.knownWinnableDecks.add(n),this.onProgress&&this.onProgress(n)}}var s,i=n(15);function c(...e){l(s.WARNING,e)}function d(...e){l(s.INFO,e)}function l(e,t){switch(e){case s.ERROR:console.error(`ERROR | ${self.name} | `,...t);break;case s.WARNING:console.warn(`WARNING | ${self.name} | `,...t);break;case s.INFO:console.info(`INFO | ${self.name} | `,...t);break;case s.DEBUG:console.debug(`DEBUG | ${self.name} | `,...t)}}!function(e){e.ERROR="SEVERITY.ERROR",e.WARNING="SEVERITY.WARNING",e.INFO="SEVERITY.INFO",e.DEBUG="SEVERITY.DEBUG"}(s||(s={}));let u=null;function f(e){const t=setTimeout(e);return{cancel(){clearTimeout(t)}}}self.onmessage=e=>{if("number"==typeof e.data&&[1,3].includes(e.data))return d(`Creating a winnable games generator for ${e.data} drawn cards`),t=e.data,void(u=new a({...i.b,drawnCards:t},i.a,i.c,f));var t;u?e.data.generateNewGame?(d("Generating a new winnable game"),u.generateWinnableGame().task.then(e=>{d("A new winnable game has been generated"),self.postMessage(e)}).catch(e=>{!function(...e){l(s.ERROR,e)}("Generator has failed",e)})):c("Received an invalid message",e.data):c("Received a request to generate a new game, but no generator has been created yet, waiting for a configuration")}},6:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return d})),n.d(t,"c",(function(){return l})),n.d(t,"d",(function(){return u}));var r=n(1),o=n(2),a=n(4),s=n(9),i=n(3);class c{constructor(e,t,n,r){this.stock=e,this.waste=t,this.foundation=n,this.tableau=r}}function d(e,t,n){switch(n.move){case o.a.DRAW_CARDS:return function(e,t,n){if(n!==t.drawnCards)throw new Error(`The number of cards to draw (${n}) does not match the number in game rules (${t.drawnCards})`);const[o,s]=Object(a.b)(e.stock,n),i=Object(a.d)(e.waste,new a.a(s.map(e=>Object(r.j)(e))));return new c(o,i,e.foundation,e.tableau)}(e,t,n.drawnCards);case o.a.REDEAL:return function(e){if(e.stock.cards.length)throw new Error("Cannot redeal if there are cards in the stock");return new c(new a.a(e.waste.cards.map(e=>Object(r.j)(e)).reverse()),new a.a([]),e.foundation,e.tableau)}(e);case o.a.WASTE_TO_FOUNDATION:return function(e){if(!e.waste.cards.length)throw new Error("There is no card on the waste pile");const[t,[n]]=Object(a.b)(e.waste,1),r=f(e.foundation,n);return new c(e.stock,t,r,e.tableau)}(e);case o.a.WASTE_TO_TABLEAU:return function(e,t,n){if(!e.waste.cards.length)throw new Error("There is no card on the waste pile");const[o,[d]]=Object(a.b)(e.waste,1);if(!n.cards.length&&!t.allowNonKingToEmptyPileTransfer&&d.rank!==r.d.KING)throw new Error("The current game rules forbid placing any card other than a King on an empty tableau pile");if(n.cards.length&&!Object(r.i)(Object(i.a)(n.cards),d))throw new Error("The top waste card cannot be placed on top of the target tableau pile because it is not in rank sequence with the current top card of the target pile or it is of the same french deck color (red/black) as the current top card of the target pile");const l=Object(s.b)(e.tableau,n,d);return new c(e.stock,o,e.foundation,l)}(e,t,e.tableau.piles[n.pileIndex]);case o.a.TABLEAU_TO_FOUNDATION:return function(e,t){const[n,r]=Object(s.d)(e.tableau,t),o=f(e.foundation,r);return new c(e.stock,e.waste,o,n)}(e,e.tableau.piles[n.pileIndex]);case o.a.REVEAL_TABLEAU_CARD:return function(e,t){const n=Object(s.e)(e.tableau,t);return new c(e.stock,e.waste,e.foundation,n)}(e,e.tableau.piles[n.pileIndex]);case o.a.FOUNDATION_TO_TABLEAU:return function(e,t,n,o){if(!e.foundation[n].cards.length)throw new Error(`The specified foundation (${n}) contains no cards`);const[d,[l]]=Object(a.b)(e.foundation[n],1);if(!o.cards.length&&!t.allowNonKingToEmptyPileTransfer&&l.rank!==r.d.KING)throw new Error("The current game rules forbid placing any card other than a King on an empty tableau pile");if(o.cards.length&&!Object(r.i)(Object(i.a)(o.cards),l))throw new Error("The top foundation card cannot be placed on top of the target tableau pile because it is not in rank sequence with the current top card of the target pile or it is of the same french deck color (red/black) as the top card of the target pile");const u=Object(s.b)(e.tableau,o,l);return new c(e.stock,e.waste,{...e.foundation,[l.color]:d},u)}(e,t,n.color,e.tableau.piles[n.pileIndex]);case o.a.TABLEAU_TO_TABLEAU:return function(e,t,n,o,a){if(!a.cards.length&&!t.allowNonKingToEmptyPileTransfer&&o.rank!==r.d.KING)throw new Error("The current game rules forbid placing any card other than a King on an empty tableau pile");if(a.cards.length&&!Object(r.i)(Object(i.a)(a.cards),o))throw new Error("The top moved card cannot be placed on top of the target tableau pile because it is not in rank sequence with the current top card of the target pile or it is of the same french deck color (red/black) as the current top card of the target pile");const d=Object(s.c)(e.tableau,n,o,a);return new c(e.stock,e.waste,e.foundation,d)}(e,t,e.tableau.piles[n.sourcePileIndex],e.tableau.piles[n.sourcePileIndex].cards[n.topMovedCardIndex],e.tableau.piles[n.targetPileIndex]);default:throw new Error(`Unknown move type: ${n&&n.move}`)}}function l({stock:e,tableau:t,waste:n}){return!e.cards.length&&!n.cards.length&&t.piles.every(e=>!e.cards.length)}function u({stock:e,waste:t,tableau:{piles:n}}){return!e.cards.length&&!t.cards.length&&n.every(e=>e.cards.every(e=>e.side===r.e.FACE))}function f(e,t){const n=e[t.color];if(!n.cards.length&&t.rank!==r.d.ACE)throw new Error("Only the Ace can be placed at the bottom of a foundation");if(n.cards.length&&!Object(r.h)(Object(i.a)(n.cards),t)){const e=Object(i.a)(n.cards);throw new Error(`The provided card ${t.rank} cannot be placed on top of ${e.rank}, expected a `+`${r.c[r.c.indexOf(e.rank)+1]} card.`)}const o=Object(a.c)(n,t);return{...e,[t.color]:o}}},7:function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return l})),n.d(t,"d",(function(){return u})),n.d(t,"f",(function(){return f})),n.d(t,"g",(function(){return p})),n.d(t,"e",(function(){return h})),n.d(t,"c",(function(){return A}));var r=n(10),o=n(1),a=n(6),s=n(4),i=n(9),c=n(3);function d(e,t=null){if(!Number.isSafeInteger(e.drawnCards)||e.drawnCards<=0)throw new TypeError(`The drawnCards game rule must be a positive safe integer, ${e.drawnCards} was provided`);if(!Number.isSafeInteger(e.tableauPiles)||e.tableauPiles<=0)throw new TypeError(`The tableauPiles game rule must be a positive safe integer, ${e.tableauPiles} was provided`);let n=t?new s.a(t):Object(s.e)(new s.a(o.b));for(const e of n.cards)e.side===o.e.FACE&&(n=Object(s.g)(n,e));const r=[];for(let t=0;t<e.tableauPiles;t++){const[e,o]=Object(s.b)(n,t+1),a=new s.a(o);a.cards.length?r.push(Object(s.g)(a,Object(c.a)(a.cards))):r.push(a),n=e}return{future:[],history:[],rules:{allowNonKingToEmptyPileTransfer:e.allowNonKingToEmptyPileTransfer,drawnCards:e.drawnCards},startTime:{absoluteTimestamp:Date.now(),logicalTimestamp:performance.now()},state:new a.a(n,new s.a([]),{[o.a.DIAMONDS]:new s.a([]),[o.a.HEARTHS]:new s.a([]),[o.a.CLUBS]:new s.a([]),[o.a.SPADES]:new s.a([])},new i.a(r))}}function l(e,t,{maxMoves:n,maxSimulationTime:o,simulationEndPredicate:a}){const s=d(e);let i=s.state,c=!1,l=0;const u=performance.now();for(;;){const s=Object(r.c)(i,e,t);if(l++,s===i||l>=n||a(s)){c=a(s);break}if(!(l%10)&&performance.now()-u>=o){c=a(s);break}i=s}return[s,c]}function u(e,t){return A(e,Object(a.b)(e.state,e.rules,t),t)}function f(e){return{...e,future:[],history:[],startTime:{absoluteTimestamp:Date.now(),logicalTimestamp:performance.now()},state:e.history.length?e.history[0][0]:e.state}}function p(e){if(!e.history.length)return e;const t=e.history.slice(),[n]=t.splice(-1);return{...e,future:[n,...e.future],history:t,state:n[0]}}function h(e){if(!e.future.length)return e;const[t,...n]=e.future,r=n.length?n[0][0]:u({...e,state:t[0]},t[1]).state;return{...e,future:n,history:e.history.concat([t]),state:r}}function A(e,t,n){return{...e,future:[],history:e.history.concat([[e.state,{...n,logicalTimestamp:performance.now()}]]),state:t}}},8:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"c",(function(){return o})),n.d(t,"b",(function(){return d})),n.d(t,"d",(function(){return l}));var r,o,a=n(1),s=n(6),i=n(2),c=n(3);!function(e){e.CURRENT_STATE="HintGeneratorMode.CURRENT_STATE",e.WITH_FULL_STOCK="HintGeneratorMode.WITH_FULL_STOCK"}(r||(r={})),function(e){e.ABSOLUTE="MoveConfidence.ABSOLUTE",e.VERY_HIGH="MoveConfidence.VERY_HIGH",e.HIGH="MoveConfidence.HIGH",e.MEDIUM="MoveConfidence.MEDIUM",e.LOW="MoveConfidence.LOW",e.VERY_LOW="MoveConfidence.VERY_LOW",e.MINISCULE="MoveConfidence.MINISCULE"}(o||(o={}));const d=[o.ABSOLUTE,o.VERY_HIGH,o.HIGH,o.MEDIUM,o.LOW,o.VERY_LOW,o.MINISCULE];function l(e,t,n){const d=function(e,t,n){switch(n){case r.CURRENT_STATE:return e.waste.cards.length?[Object(c.a)(e.waste.cards)]:[];case r.WITH_FULL_STOCK:{if(!e.waste.cards.length&&!e.stock.cards.length)return[];const n=e.stock.cards.slice(),r=e.waste.cards.slice(),o=new Set;if(r.length){o.add(Object(c.a)(r));for(let e=n.length-t.drawnCards;e>=0;e-=t.drawnCards)o.add(Object(a.j)(n[e]))}n.push(...r.reverse().map(a.j));for(let e=n.length-t.drawnCards;e>=0;e-=t.drawnCards)o.add(Object(a.j)(n[e]));return[...o]}default:throw new TypeError(`Unknown hint generator mode: ${n}`)}}(e,t,n),{foundation:l,tableau:f}=e,p=f.piles.filter(e=>e.cards.length).map(e=>Object(c.a)(e.cards)),h={[a.a.DIAMONDS]:Object(c.b)(l[a.a.DIAMONDS].cards),[a.a.HEARTHS]:Object(c.b)(l[a.a.HEARTHS].cards),[a.a.CLUBS]:Object(c.b)(l[a.a.CLUBS].cards),[a.a.SPADES]:Object(c.b)(l[a.a.SPADES].cards)},A=[];return A.push(...function(e,t,n,r){var c,d;const{tableau:l}=e,f=[],p=n.find(e=>e.side===a.e.BACK);p&&f.push([{move:i.a.REVEAL_TABLEAU_CARD,pileIndex:u(l,p)},p,o.ABSOLUTE]);for(const e of n)e.side===a.e.FACE&&e.rank===a.d.ACE&&f.push([{move:i.a.TABLEAU_TO_FOUNDATION,pileIndex:u(l,e)},e,o.ABSOLUTE]);for(const e of t)e.rank===a.d.ACE&&f.push([{move:i.a.WASTE_TO_FOUNDATION},e,o.ABSOLUTE]);for(const e of n)e.side===a.e.FACE&&e.rank===a.d.TWO&&(null===(c=r[e.color])||void 0===c?void 0:c.rank)===a.d.ACE&&f.push([{move:i.a.TABLEAU_TO_FOUNDATION,pileIndex:u(l,e)},e,o.ABSOLUTE]);for(const e of t)e.rank===a.d.TWO&&(null===(d=r[e.color])||void 0===d?void 0:d.rank)===a.d.ACE&&f.push([{move:i.a.WASTE_TO_FOUNDATION},e,o.ABSOLUTE]);if(Object(s.d)(e))for(const e of n){const t=r[e.color];t&&Object(a.h)(t,e)&&f.push([{move:i.a.TABLEAU_TO_FOUNDATION,pileIndex:u(l,e)},e,o.ABSOLUTE])}return f}(e,d,p,h)),A.push(...function(e,t){const{tableau:n}=e,r=[],s=n.piles.slice().sort((e,t)=>t.cards.length-e.cards.length);for(const e of s){const t=e.cards.findIndex(e=>e.side===a.e.FACE),s=e.cards[t];if(t<1||[a.d.FIVE,a.d.SIX,a.d.SEVEN,a.d.EIGHT].includes(s.rank))continue;const d=n.piles.findIndex(e=>e.cards.length&&Object(c.a)(e.cards).side===a.e.FACE&&Object(a.i)(Object(c.a)(e.cards),s));d>-1&&r.push([{move:i.a.TABLEAU_TO_TABLEAU,sourcePileIndex:u(n,s),targetPileIndex:d,topMovedCardIndex:t},s,o.VERY_HIGH])}const d=n.piles.filter(e=>e.cards.length>1&&(e.cards[0].side===a.e.BACK||e.cards[0].rank!==a.d.KING)).map(e=>e.cards.find(e=>e.rank===a.d.KING&&e.side===a.e.FACE)).filter(e=>!!e).map(e=>e).concat(t.filter(e=>e.rank===a.d.KING)),l=n.piles.findIndex(e=>!e.cards.length);if(d.length&&l>-1)for(const e of d){const s=t.includes(e)?e:Object(c.a)(n.piles[u(n,e)].cards);if(n.piles.find(e=>{const t=e.cards.filter(e=>e.side===a.e.FACE);return e.cards.length>t.length&&t.length&&Object(a.i)(s,t[0])})){const a=u(n,e);r.push([t.includes(e)?{move:i.a.WASTE_TO_TABLEAU,pileIndex:l}:{move:i.a.TABLEAU_TO_TABLEAU,sourcePileIndex:a,targetPileIndex:l,topMovedCardIndex:n.piles[a].cards.indexOf(e)},e,o.VERY_HIGH])}}return r}(e,d)),A.push(...function(e,t){const n=[],{tableau:r}=e,s=r.piles.filter(e=>e.cards.length>1&&(e.cards[0].side===a.e.BACK||e.cards[0].rank!==a.d.KING)).map(e=>e.cards.find(e=>e.rank===a.d.KING&&e.side===a.e.FACE)).filter(e=>!!e).map(e=>e).concat(t.filter(e=>e.rank===a.d.KING)),d=r.piles.findIndex(e=>!e.cards.length);if(s.length&&d>-1)for(const e of s){const s=t.includes(e)?e:Object(c.a)(r.piles[u(r,e)].cards);if(r.piles.map(e=>e.cards.filter(e=>e.side===a.e.FACE)).filter(e=>e.length).map((e,t,n)=>[e,Math.max(...n.map(e=>e.length))]).filter(([e,t])=>e.length===t).map(([e])=>e).find(e=>Object(a.i)(s,e[0]))){const a=u(r,e);n.push([t.includes(e)?{move:i.a.WASTE_TO_TABLEAU,pileIndex:d}:{move:i.a.TABLEAU_TO_TABLEAU,sourcePileIndex:a,targetPileIndex:d,topMovedCardIndex:r.piles[a].cards.indexOf(e)},e,o.HIGH])}}return n}(e,d)),A.push(...function(e){const t=[],{tableau:n}=e,r=n.piles.filter(e=>e.cards.length>1).filter(e=>1===e.cards.filter(e=>e.side===a.e.FACE).length).map(e=>Object(c.a)(e.cards)).filter(e=>[a.d.FIVE,a.d.SIX,a.d.SEVEN,a.d.EIGHT].includes(e.rank));for(const e of r){const r=u(n,e),s=n.piles.filter(t=>t.cards.length&&Object(c.a)(t.cards).side===a.e.FACE&&Object(a.i)(Object(c.a)(t.cards),e));for(const a of s)t.push([{move:i.a.TABLEAU_TO_TABLEAU,sourcePileIndex:r,targetPileIndex:n.piles.indexOf(a),topMovedCardIndex:n.piles[r].cards.indexOf(e)},e,o.MEDIUM])}return t}(e)),A.push(...function(e){const t=[],{tableau:n}=e,r=n.piles.map(e=>e.cards.filter(e=>e.side===a.e.FACE)).filter(e=>e.length),s=r.filter(e=>n.piles[u(n,e[0])].cards[0].side===a.e.BACK);for(const e of s){const s=e[0];for(const e of r){const r=Object(c.a)(e);if(Object(a.i)(r,s)){const e=u(n,s);t.push([{move:i.a.TABLEAU_TO_TABLEAU,sourcePileIndex:e,targetPileIndex:u(n,r),topMovedCardIndex:n.piles[e].cards.indexOf(s)},s,o.LOW])}}}const d=n.piles.filter(e=>e.cards.length&&e.cards.every(e=>e.side===a.e.FACE));if(n.piles.filter(e=>e.cards.some(e=>e.side===a.e.FACE&&e.rank===a.d.KING)).length)for(const e of d){const s=e.cards[0];for(const e of r){const r=Object(c.a)(e);if(Object(a.i)(r,s)){const e=u(n,s);t.push([{move:i.a.TABLEAU_TO_TABLEAU,sourcePileIndex:e,targetPileIndex:u(n,r),topMovedCardIndex:n.piles[e].cards.indexOf(s)},s,o.LOW])}}}return t}(e)),A.push(...function(e,t,n,r){const s=[],{tableau:d}=e,l=Object.values(n).filter(e=>e);for(const e of l){if(!d.piles.some(t=>{const n=t.cards.find(e=>e.side===a.e.FACE);return n&&t.cards[0]!==n&&Object(a.i)(e,n)}))continue;const t=d.piles.findIndex(t=>{const n=Object(c.b)(t.cards);return n&&n.side===a.e.FACE&&Object(a.i)(n,e)});t>-1&&s.push([{color:e.color,move:i.a.FOUNDATION_TO_TABLEAU,pileIndex:t},e,o.VERY_LOW])}for(const e of l){if(!t.some(t=>Object(a.i)(e,t)))continue;const n=d.piles.findIndex(t=>{const n=Object(c.b)(t.cards);return n&&n.side===a.e.FACE&&Object(a.i)(n,e)});n>-1&&s.push([{color:e.color,move:i.a.FOUNDATION_TO_TABLEAU,pileIndex:n},e,o.VERY_LOW])}const f=d.piles.findIndex(e=>!e.cards.length);for(const e of d.piles){const t=e.cards.findIndex(e=>e.side===a.e.FACE&&e.rank===a.d.KING),n=e.cards[t];n&&t>0&&e.cards[t-1].side===a.e.BACK&&f>-1&&s.push([{move:i.a.TABLEAU_TO_TABLEAU,sourcePileIndex:u(d,n),targetPileIndex:f,topMovedCardIndex:t},n,o.VERY_LOW])}const p=d.piles.filter(e=>e.cards.length&&e.cards.every(e=>e.side===a.e.FACE)),h=d.piles.filter(e=>e.cards.some(e=>e.side===a.e.FACE));for(const e of p){const t=e.cards[0];for(const e of h){const n=Object(c.a)(e.cards);if(Object(a.i)(n,t)){const e=u(d,t);s.push([{move:i.a.TABLEAU_TO_TABLEAU,sourcePileIndex:e,targetPileIndex:u(d,n),topMovedCardIndex:d.piles[e].cards.indexOf(t)},t,o.VERY_LOW])}}}for(const e of t)for(const t of d.piles){const n=Object(c.b)(t.cards);n&&n.side===a.e.FACE&&Object(a.i)(n,e)&&s.push([{move:i.a.WASTE_TO_TABLEAU,pileIndex:u(d,n)},e,o.VERY_LOW])}for(const e of t)for(const t of l)Object(a.h)(t,e)&&s.push([{move:i.a.WASTE_TO_FOUNDATION},e,o.VERY_LOW]);if(f>-1){const e=r.allowNonKingToEmptyPileTransfer?t:t.filter(e=>e.rank===a.d.KING);for(const t of e)s.push([{move:i.a.WASTE_TO_TABLEAU,pileIndex:f},t,o.VERY_LOW])}return s}(e,d,h,t)),A.push(...function(e,t,n,r){const s=[],{tableau:d}=e;for(const e of d.piles){const t=Object(c.b)(e.cards);if(!t||t.side===a.e.BACK)continue;const n=r[t.color];if(!n||!Object(a.h)(n,t))continue;const l=e.cards.slice(-2)[0];if(e.cards.length>1&&l.side===a.e.BACK)s.push([{move:i.a.TABLEAU_TO_FOUNDATION,pileIndex:u(d,t)},t,o.MINISCULE]);else for(const e of d.piles){const n=e.cards.find(e=>e.side===a.e.FACE);n&&e.cards[0]!==n&&Object(a.i)(l,n)&&s.push([{move:i.a.TABLEAU_TO_FOUNDATION,pileIndex:u(d,t)},t,o.MINISCULE])}}for(const e of d.piles){const t=Object(c.b)(e.cards);if(!t||t.side===a.e.BACK)continue;const l=r[t.color];if(!l||!Object(a.h)(l,t))continue;for(const e of n)Object(a.h)(t,e)&&s.push([{move:i.a.TABLEAU_TO_FOUNDATION,pileIndex:u(d,t)},t,o.MINISCULE]);if(e.cards.length<=1)continue;const f=e.cards.slice(-2)[0];if(f.side===a.e.FACE)for(const e of n)Object(a.i)(f,e)&&s.push([{move:i.a.TABLEAU_TO_FOUNDATION,pileIndex:u(d,t)},t,o.MINISCULE])}const l=d.piles.findIndex(e=>!e.cards.length);if(t.allowNonKingToEmptyPileTransfer&&l>-1)for(const e of n.slice().sort((e,t)=>Object(a.f)(t,e)))s.push([{move:i.a.WASTE_TO_TABLEAU,pileIndex:l},e,o.MINISCULE]);if(t.allowNonKingToEmptyPileTransfer&&l>-1){const e=d.piles.filter(e=>e.cards.length&&e.cards[0].side===a.e.BACK&&Object(c.a)(e.cards).side===a.e.FACE).sort((e,t)=>t.cards.filter(e=>e.side===a.e.FACE).length-e.cards.filter(e=>e.side===a.e.FACE).length);for(const t of e){const e=t.cards.findIndex(e=>e.side===a.e.FACE);s.push([{move:i.a.TABLEAU_TO_TABLEAU,sourcePileIndex:u(d,t.cards[e]),targetPileIndex:l,topMovedCardIndex:e},t.cards[e],o.MINISCULE])}}for(const e of d.piles){if(!e.cards.length)continue;const t=Object(c.a)(e.cards),n=r[t.color];n&&Object(a.h)(n,t)&&s.push([{move:i.a.TABLEAU_TO_FOUNDATION,pileIndex:u(d,t)},t,o.MINISCULE])}return s}(e,t,d,h)),function(e){const t=e.filter(([e])=>e.move!==i.a.FOUNDATION_TO_TABLEAU);if(t.length&&t.length!==e.length)return t;return e}(function(e){const t=[];for(const r of e){t.some(e=>n(r[0],e[0])&&r[1]===e[1])||t.push(r)}return t;function n(e,t){const n=Object.keys(e),r=Object.keys(t);return n.length===r.length&&n.every(n=>e[n]===t[n])}}(A))}function u(e,t){return e.piles.findIndex(e=>e.cards.includes(t))}},9:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return i})),n.d(t,"d",(function(){return c})),n.d(t,"e",(function(){return d})),n.d(t,"c",(function(){return l}));var r=n(1),o=n(4),a=n(3);class s{constructor(e){this.piles=e}}function i(e,t,n){const r=e.piles.indexOf(t);if(-1===r)throw new Error("The specified pile is not present in the specified tableau");const a=Object(o.c)(t,n),i=e.piles.slice();return i.splice(r,1,a),new s(i)}function c(e,t){const n=e.piles.indexOf(t);if(-1===n)throw new Error("The specified pile is not present in the specified tableau");if(!t.cards.length)throw new Error("The specified pile contains no cards");const[r,[a]]=Object(o.b)(t,1),i=e.piles.slice();return i.splice(n,1,r),[new s(i),a]}function d(e,t){if(!t.cards.length)throw new Error("The specified pile is empty");if(Object(a.a)(t.cards).side===r.e.FACE)throw new Error("The top card is already face-up");const n=e.piles.indexOf(t);if(-1===n)throw new Error("The specified pile is not present in the specified tableau");const i=Object(o.g)(t,Object(a.a)(t.cards)),c=e.piles.slice();return c.splice(n,1,i),new s(c)}function l(e,t,n,r){const a=e.piles.indexOf(t),i=e.piles.indexOf(r);if(-1===a)throw new Error("The specified source pile is not present in the specified tableau");if(-1===i)throw new Error("The specified target pile is not present in the specified tableau");const[c,d]=Object(o.f)(t,n),l=e.piles.slice();return l.splice(a,1,c),l.splice(i,1,Object(o.d)(r,d)),new s(l)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,